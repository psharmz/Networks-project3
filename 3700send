import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0

# for the unAckedBuffer table
# | datatable_seq | datatable_data | datatable_timesent
# | sequence number | data | time 

DATATABLE_SEQ = 0
DATATABLE_DATA = 1
DATATABLE_TIMESENT = 2

# for the unAckedBuffer table, set the max size to deal with congestion
# this is bounded by the recievers advertized window 
# adv_wnd: receiver advertised window
# *** note for later. Don't know what this is right now
# will figure it out later
ADV_WND = 10 

# cwnd:  congestion window
# CWND = min(CWND, ADV_WIND)
# but it is initialized to 1
CWND = 1

# ssthresh:  threshold size (used to update cwnd)
# but initially ssthresh = adv_wnd;
SSTHRESH = ADV_WND

# acktimeout = how long we wait for an ack 
# rto = 
ACKTIMEOUT = 3
RTO = 3

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
#sock.settimeout(TIMEOUT)
sock.settimeout(RTO)

# Write message to stderr
def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# Send the next packet 
def send_next_packet():
  # set global variable SEQUENCE 
  # (which is initialized at 0 but the then incremented based on the length of data)
  global SEQUENCE

  # set global variable timeLastPacketSent
  # this will be used for timeout purposes 
  global timeLastPacketSent

  # read in data from stdin, read in data size
  data = sys.stdin.read(DATA_SIZE)
  
  # if there is data, then create a message to send
  # if successfully sent, add to unacked packet buffer
  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
    
    # increment the seq number so we can send the next packet when we are ready 
    SEQUENCE += len(data)
  
    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      # logs [send data] sequence_number (size of packet sent)
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
      # updates the time the last packet was sent 
      timeLastPacketSent = time.time()
      # keep track of the packet we just sent for when we recieve an ack 
      # in the UnackedBuffer table: sequence #, data size, time 
      addToUnackedBuffer(SEQUENCE, data, timeLastPacketSent)
    return True
  else:
    return False
  
# send the last packet to the receiver
def sendFinalPacket():
  global SEQUENCE
  global timeLastPacketSent
  
  sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
  SEQUENCE++
  timeLastPacketSent = time.time()
  # add 1 to sequence because receiver will
  # send back sequence num plus one as ack
  addToUnackedBuffer(SEQUENCE, "", timeLastPacketSent)
  
# keep track of all unacked packets  
def addToUnackedBuffer(SEQUENCE, data, timeSent):
  global unAckedBuffer
  
  # if already in table, update the time
  for entry in unAckedBuffer:
    # the seq number could already be in the table for 2 reasons
    # 1. we had to resent the packet
    # 2. we ran out of seq num and hence it wrapped around
    if entry[DATATABLE_SEQ] == SEQUENCE:
      ## *** note for future: we may have to add more here
      entry[DATATABLE_TIMESENT] = timeSent
      return
  
  # otherwise add it
  unAckedBuffer.append([SEQUENCE, data, timeSent])


# implement slow start or congestion avoidance, update CWND accordingly 
def updateCWND():
  if (CWND < SSTHRESH)
    # implement slow start
    CWND = CWND + 1
  else 
    #implement congestion avoidance
    CWND = CWND + 1/CWND

# update the congestion for when we hit the ACK timeout 
def updateCWNDonTimeout():
  #implement multiplicative decrease
  SSTHRESH = CWND/2
  CWND = 1; 
 
# once an ack is received for a packet
# remove it from the unacked buffer
def removeDataFromUnackedBuffer(SEQUENCE):
  for entry in unAckedBuffer:
    # check if this is a new ack
    if entry[DATATABLE_SEQ] == SEQUENCE:
      # if this is a new ack 
      # remove the entry  and update CWND
      unAckedBuffer.remove(entry)
      updateCWND()
      return

# check to see if any packets were
# dropped by checking ack timeouts    
def checkForAckTimeouts():
  global timeLastPacketSent
  
  log("IN THE ACK TIMEOUT CHECKER")
  for entry in unAckedBuffer:
    # if packet dropped, resend
    # also update the congestion window 
    if time.time() - entry[DATATABLE_TIMESENT] >= ACKTIMEOUT:
      # update the congestion window
      updateCWNDonTimeout()
      # sequence number is retrieved by getting current minus
      # the amount of data sent
      sequenceNum = entry[DATATABLE_SEQ] - len(entry[DATATABLE_DATA])

      # if we are not at the end of the data, send it 
      if len(entry[DATATABLE_DATA]) > 0:
        msg = json.dumps({"sequence": sequenceNum, "data": entry[DATATABLE_DATA], "ack": False, "eof": False})
      # if we are at the end of the data, send the remaining and set eof
      elif len(entry[DATATABLE_DATA]) == 0:
        msg = json.dumps({"sequence": sequenceNum - 1, "data": "", "ack": False, "eof": True})
       
      if sock.sendto(msg, dest) < len(msg):
        log("[error] unable to fully send packet")
      else:
        log("[send data] " + str(entry[DATATABLE_SEQ]) + " (" + str(len(entry[DATATABLE_DATA])) + ")")
        timeLastPacketSent = time.time()
        # *** to check later: would we have to update the sequence number if we are resending a packet??
        addToUnackedBuffer(entry[DATATABLE_SEQ], entry[DATATABLE_DATA], timeLastPacketSent)

# keep track of unacked packets
# seq num, data, time sent
unAckedBuffer = []

# keep track of when last packet sent
# and received for timeout purposes
timeLastPacketSent = -1
timeLastPacketReceived = -1

# initially set finalPacketSent to false
finalPacketSent = 0

# Send first packet of data
send_next_packet()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")  
  try:
    result = sock.recvfrom(MSG_SIZE)

    if result:
      (data, addr) = result     a cvc aercf ac
      timeLastPacketReceived = time.time()
      try:
        decoded = json.loads(data)
  
        # If there is an ack, send next packet
        # and remove data from buffer
        if decoded['ack'] == SEQUENCE:
          removeDataFromUnackedBuffer(SEQUENCE)
          log("[recv ack] " + str(SEQUENCE))
  
          # Try to send next packet; if no more data
          # send final packet, if we have already sent
          # last packet and have gotten acks for all
          # messages, then we are done
          if (not send_next_packet()) and (not finalPacketSent):
            sendFinalPacket()
            finalPacketSent = 1
            break
          # *** note for later, check size of unAckedBuffer instead maybe? If size
          # of unacked buffer is 0, then remove. 
          elif finalPacketSent and (not unAckedBuffer):
          #  break
      except (ValueError, KeyError, TypeError):
        log("[recv corrupt packet]")
  except socket.timeout:    
    # check to end the program
    # or if it was a dropped message
    if timeLastPacketReceived != -1 and time.time() - timeLastPacketReceived >= 30:    
      log("[error] timeout")
      sys.exit(-1)
    elif timeLastPacketSent != -1 and time.time() - timeLastPacketSent >= 3:
      checkForAckTimeouts()

# Send final packet to say no more data to send

log("[completed]")
sys.exit(0)




# personal notes

# sender side deals with congestion
# window size determines send rate
# adjust window to prevent congestion collapse

# control the number of unACKed packets = adjust the size of the buffer 

# wnd = min(cwnd, adv_wnd);
# effective_wnd = wnd – (last_byte_sent – last_byte_acked);


# Upon receipt of ACK: increase cwnd
# Data was delivered, perhaps we can send faster
# cwnd growth is proportional to RTT
# On loss: decrease cwnd
# Data is being lost, there must be congestion
# Question: increase/decrease functions to use?

# Maintains three variables:
# cwnd:  congestion window
# adv_wnd: receiver advertised window 
# ssthresh:  threshold size (used to update cwnd)
# For sending, use: cwnd = min(cwnd, adv_wnd)
# Two phases of congestion control
# Slow start (cwnd < ssthresh)
# Probe for bottleneck bandwidth
# Congestion avoidance (cwnd >= ssthresh)
# AIMD

# Goal: reach knee quickly
# Upon starting (or restarting) a connection
# cwnd =1
# ssthresh = adv_wnd
# Each time a segment is ACKed, cwnd++
# Continues until…
# ssthresh is reached
# Or a packet is lost
# Slow Start is not actually slow
# cwnd increases exponentially

# cwnd grows rapidly
# Slows down when…
# cwnd >= ssthresh
# Or a packet drops

# AIMD mode
# ssthresh is lower-bound guess about location of the knee
# If cwnd >= ssthresh then 
#   each time a segment is ACKed cwnd += 1/cwnd
# So cwnd is increased by one only if all segments have been acknowledged

# Initially:
#   cwnd = 1;
#   ssthresh = adv_wnd;
# New ack received:
#   if (cwnd < ssthresh) 
#         /* Slow Start*/
#         cwnd = cwnd + 1;
#   else
#         /* Congestion Avoidance */
#         cwnd = cwnd + 1/cwnd;
# Timeout:
#   /* Multiplicative decrease */
#   ssthresh = cwnd/2;
#   cwnd = 1;


# Detect congestion
# Packet dropping is most reliably signal
# Delay-based methods are hard and risky
# How do you detect packet drops? ACKs
# Timeout after not receiving an ACK
# Several duplicate ACKs in a row (ignore for now)
# Rate adjustment algorithm
# Modify cwnd
# Probe for bandwidth
# Responding to congestion

