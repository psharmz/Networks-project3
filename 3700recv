import sys
import socket
import time
import datetime
import select
import json

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
  
# set the ackNumber to the the packet_sequence 
def initializeAckNumber(packet_sequence):
  global ackNumber
  ackNumber = packet_sequence
  
# Sort the sequence nums in dictionary
# and print out received data
def printReceivedData():
  global receivedData
  
  for dataEntry in sorted(receivedData):
    sys.stdout.write(receivedData[dataEntry])


# send the Ack after you receive the data given the ackNumber and packet_data
def sendAck(ackNumber, packet_data):
  # if the we have received the data
  if len(packet_data) > 0:
    # increment the ackNumber or set it equal to the length of the packet_data
    ackNumber += len(packet_data)
  else:
    # if the packet_data has a length of zero or under, increment the ackNumber by one
    ackNumber++
  # log the Ack we are about to send 
  msg = json.dumps({"ack": ackNumber})
  log("ABOUT TO SEND " + msg)
  # if the sock.sento() is less than the full size of the message it means
  # the full message didn't send 
  if sock.sendto(msg, addr) < len(msg):
    log("[error] unable to fully send packet")

# set the global variables 
MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
# Ephemeral port is set to 0 
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# socket binds to localhost on ephemeral port 0
sock.bind((UDP_IP, UDP_PORT))

# socket timeout is set to 30 
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
# UDP_Port was originally set to 0 but that was ephemeral 
log("[bound] " + str(UDP_PORT))

# Store the sequence numbers and 
# corresponding data successfully received

# what should the buffer size be set to?
# receivedData{} should have a maximum size if we 
# want to implement a sliding window later. Congestion 
# is delt with on the sender side 
receivedData = {}

# Keep track of the last ack number
# to see if next segment received is
# in order or not, start at -1
ackNumber = -1

# Now listen for packets
while True:
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:
      # Get info out of packet
      decoded = json.loads(data)
      packet_eof = decoded['eof']
      packet_sequence = decoded['sequence']
      packet_data = decoded['data']
      
      # If it is the first packet we get, set
      # ack to sequence number
      if (ackNumber == -1):
        initializeAckNumber(packet_sequence)
      
      # If the EOF flag is set, print out
      # received data and exit
      if (packet_eof):
        printReceivedData()
        sendAck(ackNumber, packet_data)
        log("[completed]")
        sys.exit(0)

      # If there is data, look at it and react
      # accordingly
      if (packet_data):        
        # packet sent in order
        if (ackNumber == packet_sequence):
          log("[recv data] " + str(packet_sequence) + " (" + str(len(packet_data)) + ") ACCEPTED (in-order)")
          receivedData[packet_sequence] = packet_data
        # packet sent out of order
        elif (ackNumber != packet_sequence):
          log("[recv data] " + str(packet_sequence) + " (" + str(len(packet_data)) + ") ACCEPTED (out-of-order)")
          receivedData[packet_sequence] = packet_data
      
      # Send back an ack to the sender  
      sendAck(ackNumber, packet_data)

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)


# personal notes

# on recieving end we can:
# set the advertised window
# ignore duplicate packets
# Out-of-order packets are reordered or dropped
# Missing sequence numbers indicate lost packets
